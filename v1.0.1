#include <WiFi.h>
#include <HTTPClient.h>
#include <Update.h>

// 替換為你的WiFi憑證
const char* ssid = "labor";
const char* password = "98668800";

// GitHub上的固件URL（.bin檔案的直接下載連結）
const char* firmwareURL = "https://github.com/你的用戶名/你的倉庫/releases/download/版本號/固件名稱.bin";

// 當前固件版本（用於比較）
const char* currentVersion = "1.0.1";

void setup() {
  Serial.begin(115200);
  Serial.print("v1.0.1");
  // 連接到WiFi
  WiFi.begin(ssid, password);
  Serial.print("正在連接到WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("已連接到WiFi");

  // 檢查並更新固件
  checkForUpdates();
}

void loop() {
  // 你的主程式碼
  delay(1000);
}

// 檢查固件更新
void checkForUpdates() {
  Serial.println("檢查固件更新...");
  HTTPClient http;
  
  // 開始HTTPS請求
  http.begin(firmwareURL);
  int httpCode = http.GET();

  if (httpCode == HTTP_CODE_OK) {
    int contentLength = http.getSize();
    if (contentLength <= 0) {
      Serial.println("無效的固件大小");
      http.end();
      return;
    }

    // 開始OTA更新
    WiFiClient* stream = http.getStreamPtr();
    if (Update.begin(contentLength)) {
      Serial.println("開始固件更新...");
      size_t written = Update.writeStream(*stream);
      if (written == contentLength) {
        Serial.println("寫入完成，應用更新...");
        if (Update.end(true)) {
          Serial.println("更新成功！正在重啟...");
          ESP.restart();
        } else {
          Serial.println("更新失敗");
        }
      } else {
        Serial.println("寫入失敗");
      }
    } else {
      Serial.println("無足夠空間進行更新");
    }
  } else {
    Serial.printf("HTTP請求失敗，錯誤碼：%d\n", httpCode);
  }
  
  http.end();
}
